#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Author: Pippim
License: GNU GPLv3
Source: This repository
Description: mserve - Music Server - Pulse Audio controls
"""

from __future__ import print_function  # Must be first import
from __future__ import with_statement  # Error handling for file opens

# ==============================================================================
#
#       m - Optional wrapper to mserve.py. Provides splash window & less typing.
#
#       mserve.py (Music Server) - Manage Music in multiple locations
#
#       June 21 2023 - 'M' splash screen appears ASAP. Code cleanup.
#       July 12 2023 - Interface to/from mserve_config.py
#
# ==============================================================================


import mserve_config as cfg
caller = "m"
if not cfg.main(caller):
    print("mserve not fully installed. Aborting...")
    exit()
else:
    print(caller, "finished call to mserve_config.py with SUCCESS!")

try:
    import tkinter as tk
    PYTHON_VER = "3"
except ImportError:
    import Tkinter as tk
    PYTHON_VER = "2"

import sys              # To get passed parameters
import os               # To get current directory

import global_variables as g
if g.USER is None:
    print('"m" was forced to run g.init()')
    g.init()

import image as img     # Pippim functions for image management
import monitor          # Pippim function to center window on monitor
import mserve           # Pippim Music Server
size = 300              # Splash Window width and height (300 x 300)


def main():

    ''' Create splash window centered on active monitor '''
    splash = tk.Tk()  # Tkinter toplevel window
    splash.wm_attributes('-type', 'splash')  # No window decorations
    monitor.center(splash)

    ''' Create Big "M" Splash Image '''
    m_img = img.m_splash_image(size, 'white', 'lightskyblue', 'black')
    canvas = tk.Canvas(width=size, height=size, bg='black', highlightthickness=0)
    canvas.pack()
    canvas.create_image(0, 0, image=m_img, anchor=tk.NW)
    splash.update_idletasks()  # This is required for visibility

    ''' Change to working path - same code in m and mserve.py '''
    cwd = os.getcwd()  # First save the current working directory
    dir_path = os.path.dirname(os.path.realpath(__file__))
    if cwd != dir_path:
        os.chdir(dir_path)  # Change to directory where mserve python modules reside

    ''' Call mserve.py passing old working directory and optional music dir parm '''
    mserve.main(toplevel=splash, cwd=cwd, parameters=sys.argv)
    exit()  # Required because when mserve.py closes it comes back to this point.
    splash.mainloop()  # mainloop required for tkinter window processing


if __name__ == "__main__":
    main()

# End of m
